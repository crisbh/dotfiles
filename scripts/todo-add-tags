#!/opt/homebrew/bin/bash  # Apple Silicon (M1/M2)

TODO_FILE="$VAULT/0-inbox/todo.md"
TAG_CONFIG="$HOME/.dotfiles/scripts/task-tags.conf"
TEMP_FILE="/tmp/tagged_tasks.txt"

# Load keyword → tag mappings from external file
declare -A TAG_MAP
while IFS=":" read -r tag pattern; do
    [[ -z "$tag" || "$tag" =~ ^# ]] && continue  # Skip empty lines & comments
    pattern=$(echo "$pattern" | xargs)  # Trim spaces from the regex pattern
    TAG_MAP["$tag"]="$pattern"
done < "$TAG_CONFIG"

# Read and preserve the YAML header of the TODO.md file
HEADER_LINES=()
TASKS_FOUND=false
while IFS= read -r LINE; do
    if [[ "$LINE" == "---" && ${#HEADER_LINES[@]} -eq 0 ]]; then
        HEADER_LINES+=("$LINE")
    elif [[ ${#HEADER_LINES[@]} -gt 0 && "$LINE" != "---" ]]; then
        HEADER_LINES+=("$LINE")
    elif [[ "$LINE" == "---" && ${#HEADER_LINES[@]} -gt 0 ]]; then
        HEADER_LINES+=("$LINE")
        HEADER_LINES+=("")
        break
    else
        break
    fi
done < "$TODO_FILE"

# Write the preserved header to the temp file
printf "%s\n" "${HEADER_LINES[@]}" > "$TEMP_FILE"

# Find and keep the "# TODO list" title
while IFS= read -r LINE; do
    if [[ "$LINE" == "# TODO list" ]]; then
        echo "$LINE" >> "$TEMP_FILE"
        break
    fi
done < "$TODO_FILE"

# Process each task and only append truly missing tags
while IFS= read -r LINE; do
    [[ -z "$LINE" ]] && echo "" >> "$TEMP_FILE" && continue

    if [[ "$LINE" =~ ^- ]]; then
        TASKS_FOUND=true
        TASK_TEXT=$(echo "$LINE" | sed -E 's/- \[[! ]\] //')  # Remove checkboxes
        TASK_TEXT_LOWER=$(echo "$TASK_TEXT" | tr '[:upper:]' '[:lower:]')  # Normalize to lowercase

        # Extract existing tags from the task
        EXISTING_TAGS=($(echo "$LINE" | rg -o '@[a-zA-Z0-9_-]+' || echo ""))
        declare -A TAGS_ARRAY

        # Store existing tags in the array to prevent duplicates
        for tag in "${EXISTING_TAGS[@]}"; do
            TAGS_ARRAY["$tag"]=1
        done

        echo "🔍 Processing task: $TASK_TEXT"

        for tag in "${!TAG_MAP[@]}"; do
            pattern="${TAG_MAP[$tag]}"

            MATCHED_TEXT=$(echo "$TASK_TEXT_LOWER" | rg -i -- "$pattern" || echo "❌ No match")

            if [[ "$MATCHED_TEXT" != "❌ No match" ]]; then
                if [[ -z "${TAGS_ARRAY[$tag]}" && ! " ${EXISTING_TAGS[@]} " =~ " $tag " ]]; then
                    # Storing new tag '$tag' in TAGS_ARRAY
                    TAGS_ARRAY["$tag"]=1
                fi

            fi
        done

        # Keep only the tags that actually match OR were already there
        VALID_TAGS=()
        for tag in "${!TAGS_ARRAY[@]}"; do
            if echo "$TASK_TEXT_LOWER" | rg -i -q -- "${TAG_MAP[$tag]}"; then
                VALID_TAGS+=("$tag")
            elif [[ " ${EXISTING_TAGS[@]} " =~ " $tag " ]]; then
                VALID_TAGS+=("$tag")
            fi
        done

        # Convert valid tags back into a space-separated list
        FINAL_TAGS=$(echo "${VALID_TAGS[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' ' | xargs)

        # Build the updated task line **without stripping existing tags**
        UPDATED_TASK="$(echo "$LINE" | sed -E 's/@[a-zA-Z0-9_-]+//g' | xargs) $FINAL_TAGS"
        echo "$UPDATED_TASK" >> "$TEMP_FILE"
    else
        echo "$LINE" >> "$TEMP_FILE"
    fi
done < <(awk 'f;/^# TODO list/{f=1}' "$TODO_FILE")

# Replace the original TODO file if tasks were found
if $TASKS_FOUND; then
    mv "$TEMP_FILE" "$TODO_FILE"
    echo "✅ Tasks updated with tags in $TODO_FILE"
fi

